***********************************************
  Author : Alain Couvreur
  Contact : alain.couvreur@inria.fr
***********************************************

Note : This program runs on a  SageMath version 8.6,
       Release Date: 2019-01-15,  Using Python 2.7.15.

	   If you use a version of Sage based on
	   Python 3.x, the program may work
	   after replacing "raw_input" by "input"
	   at Line 436 od Equivalence.py


***********************************************
Description
***********************************************
This program takes a pair of quadratic vectorial
Boolean function, decides their Extended Affine
equivalence and recovers it if the function
are equivalent. The algorithm implemented
is described in the article:

Anne Canteaut, Alain Couvreur, LÃ©o Perrin.
Recovering or testing Extended-Affine Equivalence.
ArXiv : https://arxiv.org/pdf/2103.00078.pdf

The main program and some primitives for
boolean functions are all in file
Equivalence.py. We explain below
how objects are represented and how to
use the program.
***********************************************


* Vector functions *
Functions are reprensented as column matrices with entries in a multivariate
polynomial ring:

R = PolynomialRing(GF(2), 'x', n)

You can generate such functions at random using
random_vector_function(m, n, degree).


* Extended affin equivalence *
One can construct Extended affine equivalent functions using method
EAE_function(F, A, a, B, b, C):


* Decide equivalence *
The algorithm for deciding and searching equivalence
is implemented in the function:

get_equivalence(F, G, limit = 10, s = None, verbose = False):

Encouraged parameters :
limit = 10, s = 3, verbose = True.


* Run a test *

load("test_equivalence.py")

You can modify its contents to perform other tests.
